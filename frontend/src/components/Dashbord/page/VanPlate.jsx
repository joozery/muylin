import React, { useState, useEffect } from "react";
import * as XLSX from "xlsx"; // ‚úÖ ‡πÉ‡∏ä‡πâ SheetJS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel

const API_URL = import.meta.env.VITE_API_URL || "https://tabian-d0c5a982b10e.herokuapp.com/api";

// ‚úÖ Mapping ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
const charValueMap = {
  '‡∏Å': 1, '‡∏î': 1, '‡∏ñ': 1, '‡∏ó': 1, '‡∏†': 1, '‡∏Ç': 2, '‡∏ö': 2, '‡∏õ': 2, '‡∏á': 2, '‡∏ä': 2,
  '‡∏ï': 3, '‡∏ë': 3, '‡∏í': 3, '‡∏Ü': 3, '‡∏Ñ': 4, '‡∏ò': 4, '‡∏£': 4, '‡∏ç': 4, '‡∏©': 4,
  '‡∏â': 5, '‡∏ì': 5, '‡∏å': 5, '‡∏ô': 5, '‡∏°': 5, '‡∏´': 5, '‡∏Æ': 5, '‡∏é': 5, '‡∏¨': 5,
  '‡∏à': 6, '‡∏•': 6, '‡∏ß': 6, '‡∏≠': 6, '‡∏ã': 7, '‡∏®': 7, '‡∏™': 7, '‡∏¢': 8, '‡∏ú': 8, '‡∏ù': 8, '‡∏û': 8, '‡∏ü': 8,
  '‡∏è': 9, '‡∏ê': 9
};

// ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
const calculateTotal = (plate) => {
  return plate.split('').reduce((sum, char) => {
    if (charValueMap[char]) return sum + charValueMap[char];
    if (!isNaN(char)) return sum + parseInt(char, 10);
    return sum;
  }, 0);
};

const VanPlate = () => {
  const [data, setData] = useState([]);
  const [newPlate, setNewPlate] = useState({ plate: "", price: "", status: "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢" });

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const fetchPlates = async () => {
    try {
      const response = await fetch(`${API_URL}/plates_electric`);
      if (!response.ok) throw new Error("Failed to fetch plates");
      const result = await response.json();
      setData(result);
    } catch (error) {
      console.error("‚ùå Error fetching plates:", error);
    }
  };

  useEffect(() => {
    fetchPlates();
  }, []);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  const handleAddPlate = async () => {
    if (!newPlate.plate || !newPlate.price) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤");
      return;
    }

    const plateData = {
      plate: newPlate.plate,
      total: calculateTotal(newPlate.plate.replace(/\s/g, "")),
      price: newPlate.price,
      status: newPlate.status,
    };

    try {
      const response = await fetch(`${API_URL}/addPlate_electric`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(plateData),
      });

      if (!response.ok) throw new Error("Error adding plate");

      fetchPlates();
      setNewPlate({ plate: "", price: "", status: "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢" });
    } catch (error) {
      console.error("‚ùå Error adding plate:", error);
    }
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const handleStatusChange = async (id, newStatus) => {
    try {
      const response = await fetch(`${API_URL}/updateStatus_electric/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) throw new Error("Error updating status");

      fetchPlates();
    } catch (error) {
      console.error("‚ùå Error updating status:", error);
    }
  };

  // ‚úÖ ‡∏•‡∏ö‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  const handleDeletePlate = async (id) => {
    try {
      const response = await fetch(`${API_URL}/deletePlate_electric/${id}`, { method: "DELETE" });

      if (!response.ok) throw new Error("Error deleting plate");

      fetchPlates();
    } catch (error) {
      console.error("‚ùå Error deleting plate:", error);
    }
  };

  // üì• ‚úÖ **‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel**
  const handleFileUpload = (event) => {
    const file = event.target.files[0];

    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: "array" });

      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];

      const jsonData = XLSX.utils.sheet_to_json(sheet);
      console.log("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel:", jsonData);

      jsonData.forEach(async (item) => {
        const plateData = {
          plate: item["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"], 
          total: calculateTotal(item["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"].replace(/\s/g, "")),
          price: item["‡∏£‡∏≤‡∏Ñ‡∏≤"],
          status: item["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] || "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢",
        };

        try {
          await fetch(`${API_URL}/addPlate_electric`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(plateData),
          });

          fetchPlates();
        } catch (error) {
          console.error("‚ùå Error uploading plate:", error);
        }
      });
    };

    reader.readAsArrayBuffer(file);
  };

  return (
    <div className="p-4 bg-white rounded shadow">
      <h2 className="text-xl font-bold mb-4">‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡∏ï‡∏π‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏ü‡πâ‡∏≤</h2>

      {/* üì• ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel */}
      <div className="mb-4">
        <input type="file" accept=".xlsx, .csv" onChange={handleFileUpload} className="border p-2 rounded" />
      </div>

      <div className="mb-4 flex gap-2">
        <input
          type="text"
          placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
          className="border rounded px-2 py-1"
          value={newPlate.plate}
          onChange={(e) => setNewPlate({ ...newPlate, plate: e.target.value })}
        />
        <input
          type="text"
          placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤"
          className="border rounded px-2 py-1"
          value={newPlate.price}
          onChange={(e) => setNewPlate({ ...newPlate, price: e.target.value })}
        />
        <button className="bg-blue-600 text-white px-4 py-1 rounded" onClick={handleAddPlate}>
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        </button>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <table className="w-full table-auto">
        <thead>
          <tr className="bg-gray-200 text-left">
            <th className="p-2">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
            <th className="p-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</th>
            <th className="p-2">‡πÄ‡∏•‡∏Ç‡∏ú‡∏•‡∏£‡∏ß‡∏°</th>
            <th className="p-2">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
          </tr>
        </thead>
        <tbody>
          {data.map((item, index) => (
            <tr key={item.id} className="border-b">
              <td className="p-2">{index + 1}</td>
              <td className="p-2">{item.plate}</td>
              <td className="p-2">{item.total}</td>
              <td className="p-2">{item.price}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default VanPlate;