import React, { useState, useEffect } from "react";
import ClipLoader from "react-spinners/ClipLoader";
import _AlertPopUp from "../../../helper/alertpopup";
import ModalEdit from "../../Modal";
const API_URL = import.meta.env.VITE_API_URL;
const charValueMap = {
  ‡∏Å: 1,
  ‡∏î: 1,
  ‡∏ñ: 1,
  ‡∏ó: 1,
  ‡∏†: 1,
  ‡∏Ç: 2,
  ‡∏ö: 2,
  ‡∏õ: 2,
  ‡∏á: 2,
  ‡∏ä: 2,
  ‡∏ï: 3,
  ‡∏ë: 3,
  ‡∏í: 3,
  ‡∏Ü: 3,
  ‡∏Ñ: 4,
  ‡∏ò: 4,
  ‡∏£: 4,
  ‡∏ç: 4,
  ‡∏©: 4,
  ‡∏â: 5,
  ‡∏ì: 5,
  ‡∏å: 5,
  ‡∏ô: 5,
  ‡∏°: 5,
  ‡∏´: 5,
  ‡∏Æ: 5,
  ‡∏é: 5,
  ‡∏¨: 5,
  ‡∏à: 6,
  ‡∏•: 6,
  ‡∏ß: 6,
  ‡∏≠: 6,
  ‡∏ã: 7,
  ‡∏®: 7,
  ‡∏™: 7,
  ‡∏¢: 8,
  ‡∏ú: 8,
  ‡∏ù: 8,
  ‡∏û: 8,
  ‡∏ü: 8,
  ‡∏è: 9,
  ‡∏ê: 9,
};

const calculateTotal = (plate) => {
  return plate.split("").reduce((sum, char) => {
    if (charValueMap[char]) return sum + charValueMap[char];
    if (!isNaN(char)) return sum + parseInt(char, 10);
    return sum;
  }, 0);
};

const OldAuction = () => {
  const [data, setData] = useState([]);
  const [newPlate, setNewPlate] = useState({
    plate: "",
    price: "",
    status: "",
  });
  const [loading, setLoading] = useState(false); // Loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö table
  const [updatingStatus, setUpdatingStatus] = useState(false);
  const [deleteStatus, setDeleteStatus] = useState(false);
  const [adding, setAdding] = useState(false); // Loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const fetchPlates = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/plates_old`);
      if (!response.ok) throw new Error("Failed to fetch plates");
      const result = await response.json();
      setData(result);
    } catch (error) {
      console.error("‚ùå Error fetching plates:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPlates();
  }, []); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î Component

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  const handleAddPlate = async () => {
    if (
      newPlate.plate === "" ||
      newPlate.price === "" ||
      newPlate.status === ""
    ) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }

    const plateData = {
      plate: newPlate.plate,
      total: calculateTotal(newPlate.plate.replace(/\s/g, "")),
      price: newPlate.price,
      status: newPlate.status,
    };

    try {
      setAdding(true);
      console.log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà API:", plateData);
      const response = await fetch(`${API_URL}/addPlate/plates_old`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(plateData),
      });
      const result = await response.json();
      console.log("üì• API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:", result);
      if (response.ok) {
        setData((prevData) => [...prevData, result]);
        _AlertPopUp().Success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à !");
        setNewPlate({ plate: "", price: "", status: "" });
      }
      if (!response.ok) throw new Error("Error adding plate");
    } catch (error) {
      console.error("‚ùå Error adding plate:", error);
    } finally {
      setAdding(false);
    }
  };

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const handleStatusChange = async (id, newStatus) => {
    setUpdatingStatus(id);
    try {
      const response = await fetch(
        `${API_URL}/updateStatus/plates_old/${id}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ status: newStatus }),
        }
      );
      if (response.ok) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô state ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà id ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà status ‡∏î‡πâ‡∏ß‡∏¢ newStatus
        setData((prevData) =>
          prevData.map((item) =>
            item.id === id ? { ...item, status: newStatus } : item
          )
        );
      }
      if (!response.ok) throw new Error("Error updating status");
    } catch (error) {
      console.error("‚ùå Error updating status:", error);
    } finally {
      setUpdatingStatus(null);
    }
  };

  const handleDeletePlate = async (id, plate) => {
    setDeleteStatus(id);
    if (window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ${plate}? `)) {
      try {
        const response = await fetch(
          `${API_URL}/deletePlate/plates_old/${id}`,
          { method: "DELETE" }
        );
        if (!response.ok) throw new Error("Error deleting plate");
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        setData((prevData) => prevData.filter((item) => item.id !== id));
      } catch (error) {
        console.error("‚ùå Error deleting plate:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      } finally {
        setDeleteStatus(null);
      }
    }
  };
  //ModalEdit
    const [formModal, setFormModal] = useState({}); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô modal
    const [isModalOpen, setIsModalOpen] = useState(false);
    const handleOpenModal = (plate) => {
      console.log(plate);
      setFormModal(plate);
      setIsModalOpen(true);
    };
  
    const onCloseModal = () => {
      setFormModal({});
      setIsModalOpen(false);
    };
  
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleEdit = async (formModal) => {
      if (formModal.plate === "" || formModal.price === "") {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
        return;
      }
  
      const bodyData = {
        plate: formModal.plate,
        total: String(calculateTotal(formModal.plate.replace(/\s/g, ""))),
        price: formModal.price,
        status: formModal.status,
      };
  
      try {
        const response = await fetch(
          `${API_URL}/updatePlate/plates_old/${formModal.id}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(bodyData),
          }
        );
        const result = await response.json(); // ‡∏≠‡πà‡∏≤‡∏ô response body
        console.log(result);
        // return;
        if (response.ok) {
          // alert(result.message);
          alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
          fetchPlates(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
          setIsModalOpen(false); // ‚úÖ ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        } else {
          alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
        if (!response.ok) throw new Error("Error updating status");
      } catch (error) {
        console.error("‚ùå Error updating status:", error);
      }
    };

  return (
    <div className="p-4 bg-white rounded shadow">
      <h2 className="text-xl font-bold mb-4 font-['Prompt']">
      ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏Å‡πà‡∏≤
      </h2>

      <div className="mb-4 flex gap-2">
        <input
          type="text"
          placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
          className="border rounded px-2 py-1"
          value={newPlate.plate}
          onChange={(e) => setNewPlate({ ...newPlate, plate: e.target.value })}
        />
        <input
          type="text"
          placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤"
          className="border rounded px-2 py-1"
          value={newPlate.price}
          onChange={(e) => setNewPlate({ ...newPlate, price: e.target.value })}
        />
        <select
          className="border rounded px-2 py-1"
          value={newPlate.status}
          onChange={(e) => setNewPlate({ ...newPlate, status: e.target.value })}
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
          <option value="‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà">‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà</option>
          <option value="‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß">‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß">‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</option>
        </select>

        <button
          className="bg-blue-600 min-h-8 w-[130px] text-white px-4 py-1 rounded flex items-center justify-center"
          onClick={handleAddPlate}
          disabled={adding}
        >
          {adding ? <ClipLoader size={20} color="#ffffff" /> : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"}
        </button>
      </div>

      {loading ? (
        <div className="flex items-center justify-center">
          <ClipLoader />
        </div>
      ) : (
        <table className="w-full table-auto">
          <thead>
            <tr className="bg-gray-200 text-left">
              <th className="p-2">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
              <th className="p-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</th>
              <th className="p-2">‡πÄ‡∏•‡∏Ç‡∏ú‡∏•‡∏£‡∏ß‡∏°</th>
              <th className="p-2">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
              <th className="p-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th className="p-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {data.map((item, index) => (
              <tr key={index} className="border-b">
                <td className="p-2">{index + 1}</td>
                <td className="p-2">{item.plate}</td>
                <td className="p-2">{item.total}</td>
                <td className="p-2">{parseFloat(item.price).toLocaleString()}</td>
                <td className="p-2">
                  {updatingStatus === item.id ? (
                    <div className="flex justify-start pl-2 items-center">
                      <ClipLoader size={20} color="#000" />
                    </div>
                  ) : (
                    <select
                      className="border rounded px-2 py-1"
                      value={item.status || ""}
                      onChange={(e) =>
                        handleStatusChange(item.id, e.target.value)
                      }
                    >
                      <option value="" disabled>
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                      </option>
                      <option value="‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß">‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</option>
                      <option value="‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà">‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà</option>
                      <option value="‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß">‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß</option>
                    </select>
                  )}
                </td>
                <td className="p-2 text-start space-x-1">
                  <button
                    className="bg-blue-600 text-white px-2 py-1 rounded"
                    onClick={() => handleOpenModal(item)}
                  >
                    ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </button>
                  {deleteStatus === item.id ? (
                    <div className="flex justify-start pl-2 items-center">
                      <ClipLoader size={20} color="#000" />
                    </div>
                  ) : (
                    <button
                      className="bg-red-600 text-white px-2 py-1 rounded"
                      onClick={() => handleDeletePlate(item.id, item.plate)}
                    >
                      ‡∏•‡∏ö
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
      {isModalOpen && (
        <ModalEdit
          isOpen={isModalOpen}
          onClose={onCloseModal}
          onSubmit={() => handleEdit(formModal)}
          formModal={formModal}
          // plate={plate}
          setFormModal={setFormModal}
        />
      )}
    </div>
  );
};

export default OldAuction;
