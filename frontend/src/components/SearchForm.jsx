import React, { useState, useEffect } from "react";
import "./SearchForm.css";
import PlatesSearch from "./Plates/SeacrchPlatesAll";
import ClipLoader from "react-spinners/ClipLoader";
import LicensePlates from "./LicensePlates";
import { use } from "react";
const API_URL = import.meta.env.VITE_API_URL;
function SearchForm() {
  const [keyword, setKeyword] = useState("");
  const [number, setNumber] = useState("");
  const [sumOption, setSumOption] = useState("‡∏ó‡∏∏‡∏Å‡∏ú‡∏•‡∏£‡∏ß‡∏°");
  const [priceRange, setPriceRange] = useState("‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤");
  const [category, setCategory] = useState("‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà");

  const categoryOptions = [
    { label: "‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", value: "all" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå", value: "plates_motorcycle" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏Å‡∏∞‡∏ö‡∏∞‡∏õ‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", value: "plates_green" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏ï‡∏π‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏ü‡πâ‡∏≤", value: "plates_electric" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏ï‡∏π‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏Ñ", value: "plates_graphic_van" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á (‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©)", value: "plates_special" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", value: "plates_single_digit" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà", value: "plates_double_digit" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏ï‡∏≠‡∏á", value: "plates_triple_digit" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡πÇ‡∏ü‡∏£‡πå", value: "plates_quadruple_digit" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•)", value: "plates_new_non_auction" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà", value: "plates_new" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏Å‡πà‡∏≤ (‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•)", value: "plates_old_non_auction" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏Å‡πà‡∏≤", value: "plates" },
    { label: "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏£‡∏∞‡∏Ü‡∏±‡∏á‡∏ó‡∏≠‡∏á (‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏Ñ‡∏™‡∏µ‡∏ó‡∏≠‡∏á)", value: "plates_gold_graphic" },
  ];
  

  const sumOptions = [
    "‡∏ó‡∏∏‡∏Å‡∏ú‡∏•‡∏£‡∏ß‡∏°",
    9,
    10,
    14,
    15,
    16,
    18,
    19,
    20,
    23,
    24,
    25,
    26,
    28,
    29,
    32,
  ];

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô window)
  const handleSearch = () => {
    filterPlates();
  };
  const [loading, setLoading] = useState(false);
  //   const [plateData, setPlateData] = useState([]);

  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å API
  const [allPlateData, setAllPlateData] = useState([]);
  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å filter
  const [filteredPlateData, setFilteredPlateData] = useState([]);

  const [platesNew, setPlatesNew] = useState({
    text: "",
    number: "",
    sum_number: "",
    price: "",
    type: "",
  });
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà

  const groupSearchResults = (results) => {
    const grouped = {};
    results.forEach((result) => {
      if (!grouped[result.type]) {
        grouped[result.type] = [];
      }
      grouped[result.type].push(result.data); // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    });
    return Object.entries(grouped).map(([type, data]) => ({ type, data }));
  };

  const fetchPlatesNew = async () => {
    setLoading(true);
    const plateData = {
      //   ...platesNew,
      text: "",
      number: "",
      sum_number: "",
      price: "",
      type: "",
    };
    try {
      // const response = await fetch(`${API_URL}/searchPlatesAll`);
      const response = await fetch(`${API_URL}/searchPlatesAll`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(plateData),
      });
      if (!response.ok) throw new Error("Failed to fetch plates");
      const data = await response.json();
      //   setPlateData(data);
      const formattedData = data.map((item) => ({
        type: item.type,
        data: item,
      }));
      const groupedData = groupSearchResults(formattedData);
      setAllPlateData(groupedData);
      // setFilteredPlateData(data);
    } catch (error) {
      console.error("‚ùå Error fetching plates:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log(allPlateData);
  }, [allPlateData]);

  // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ filter ‡πÅ‡∏ö‡∏ö client-side ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô platesNew ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  const filterPlates = () => {
    let filtered = allPlateData;
    const { text, number, sum_number, price, type } = platesNew;
  
    filtered = filtered.map((item) => ({
      ...item,
      data: item.data.filter((plate) => {
        let match = true; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ match = true
  
        if (text) {
          match = match && plate.plate.toLowerCase().includes(text.toLowerCase());
        }
        if (number) {
          match = match && plate.plate.match(/\d+/)?.[0]?.includes(number);
        }
        if (sum_number) {
          match = match && String(plate.total).includes(sum_number);
        }
        if (price && price !== "all") {
          switch (price) {
            case "<=1000":
              match = match && Number(plate.price) <= 1000;
              break;
            case "1000-10000":
              match = match && Number(plate.price) >= 1000 && Number(plate.price) <= 10000;
              break;
            case ">=10000":
              match = match && Number(plate.price) >= 10000;
              break;
            default:
              break;
          }
        }
        if (type) {
          match = match && item.type.toLowerCase().includes(type.toLowerCase());
        }
  
        return match; // return true ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      }),
    }));
    setFilteredPlateData(filtered);
  };
  useEffect(() => {
    console.log(filteredPlateData);
  }, [filteredPlateData]);

  useEffect(() => {
    fetchPlatesNew();
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const handleReset = () => {
    setPlatesNew({
      text: "",
      number: "",
      sum_number: "",
      price: "",
      type: "",
    });
  };

//   useEffect(() => {
//     console.log(plateData);
//   }, [plateData]);

  return (
    <>
    <div className="p-10">
      <div className="search-form bg-white p-4 shadow-md">
        <h2>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</h2>
        <div className="search-inputs">
          <input
            type="text"
            placeholder="‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏Å"
            value={platesNew.text}
            onChange={(e) =>
              setPlatesNew((prev) => ({ ...prev, text: e.target.value }))
            }
            // onKeyPress={(e) => e.key === "Enter" && handleSearch()}
          />

          <input
            type="text"
            placeholder="‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 8, 88, 888, 8888"
            value={platesNew.number}
            onChange={(e) =>
              setPlatesNew((prev) => ({ ...prev, number: e.target.value }))
            }
            // onKeyPress={(e) => e.key === "Enter" && handleSearch()}
          />

          <select
            value={platesNew.sum_number}
            onChange={(e) =>
              setPlatesNew((prev) => ({ ...prev, sum_number: e.target.value }))
            }
          >
            {sumOptions.map((sum, index) => (
              <option key={index} value={sum}>
                {sum}
              </option>
            ))}
          </select>

          <select
            value={platesNew.price}
            onChange={(e) =>
              setPlatesNew((prev) => ({ ...prev, price: e.target.value }))
            }
          >
            <option value="all">‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤</option>
            <option value="<=1000">‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 1,000 ‡∏ö‡∏≤‡∏ó</option>
            <option value="1000-10000">1,000 - 10,000 ‡∏ö‡∏≤‡∏ó</option>
            <option value=">=10000">‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10,000 ‡∏ö‡∏≤‡∏ó</option>
          </select>

          <select
            value={platesNew.type}
            onChange={(e) =>
              setPlatesNew((prev) => ({ ...prev, type: e.target.value }))
            }
          >
            {categoryOptions.map((cat, index) => (
              <option key={index} value={cat.value}>
                {cat.label}
              </option>
            ))}
          </select>

          <div className="search-buttons flex space-x-2">
            <button onClick={handleSearch}>üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
            <button onClick={handleReset}>‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤</button>
          </div>
        </div>

        <div className="additional-buttons">
          {/* <button>‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ</button> */}
          <button>‡∏î‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
          <button>‡∏î‡∏π‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
        </div>
      </div>
    </div>

      <section className="license-plates-section py-12 bg-[#111111]">
        <div className="container mx-auto px-6 lg:px-20">
          <LicensePlates data={filteredPlateData}/>
        </div>
      </section>
      {/* <div>
        {loading ? (
          <div className="flex justify-center items-center mt-10">
            <ClipLoader color="#36d7b7" size={50} />
          </div>
        ) : (
          <PlatesSearch plates={filteredPlateData} />
        )}
      </div> */}
    </>
  );
}

export default SearchForm;
